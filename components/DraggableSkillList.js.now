import React, { useState } from 'react';
import { View, Text, StyleSheet, Dimensions, TextInput, TouchableOpacity } from 'react-native';
import Animated, { useAnimatedStyle, useSharedValue, withSpring, runOnJS } from 'react-native-reanimated';
import { GestureHandlerRootView, PanGestureHandler } from 'react-native-gesture-handler';

const ITEM_HEIGHT = 70;

const DraggableSkillList = ({ skills = [], onReorder = () => {}, onRemove = () => {} }) => {
  // Shared positions for animation
  const positions = skills.map((_, index) => useSharedValue(index * ITEM_HEIGHT));
  const isDragging = useSharedValue(-1);
  const scale = useSharedValue(1);

  // Local state for times
  const [totalTime, setTotalTime] = useState('');
  const [skillTimes, setSkillTimes] = useState({});

  // Sum of per-skill minutes
  const calculateCurrentTotal = () => Object.values(skillTimes).reduce((acc, t) => acc + (parseInt(t, 10) || 0), 0);

  const handleSave = () => {
    const total = parseInt(totalTime, 10) || 0;
    const current = calculateCurrentTotal();
    if (total !== current) {
      alert(`Toplam süre (${total} dk) ile becerilere ayrılan sürelerin toplamı (${current} dk) eşit olmalıdır.`);
      return;
    }

    // Replace with real save logic if needed
    alert('Değişiklikler kaydedildi!');
  };

  const handleRemoveSkill = (skill) => {
    // Call parent to remove the skill from the source array
    onRemove(skill);
  };

  // Gesture handlers
  const onGestureEvent = (index) => {
    return (event) => {
      'worklet';
      const { translationY } = event.nativeEvent;

      if (isDragging.value === -1) {
        isDragging.value = index;
        scale.value = withSpring(1.05);
      }

      const newPosition = index * ITEM_HEIGHT + translationY;
      positions[index].value = newPosition;

      const currentPos = Math.round(newPosition / ITEM_HEIGHT);
      const targetPos = Math.max(0, Math.min(skills.length - 1, currentPos));

      if (targetPos !== index) {
        const direction = targetPos > index ? 1 : -1;
        for (let i = 0; i < skills.length; i++) {
          if (i === index) continue;
          const shouldShift = (direction === 1 && i > index && i <= targetPos) || (direction === -1 && i < index && i >= targetPos);
          positions[i].value = withSpring(shouldShift ? (i - direction) * ITEM_HEIGHT : i * ITEM_HEIGHT);
        }
      }
    };
  };

  const onGestureEnd = (index) => {
    return () => {
      'worklet';
      const finalPosition = Math.round(positions[index].value / ITEM_HEIGHT);
      const targetIndex = Math.max(0, Math.min(skills.length - 1, finalPosition));

      if (targetIndex !== index) runOnJS(onReorder)(index, targetIndex);

      // Reset positions
      for (let i = 0; i < skills.length; i++) positions[i].value = withSpring(i * ITEM_HEIGHT);
      scale.value = withSpring(1);
      isDragging.value = -1;
    };
  };

  return (
    <GestureHandlerRootView style={styles.container}>
      <View style={styles.topHeader}>
        <Text style={styles.headerText}>Seçili Beceriler</Text>
        <View style={styles.totalTimeContainer}>
          <Text style={styles.totalTimeLabel}>Toplam Süre:</Text>
          <TextInput
            style={styles.totalTimeInput}
            value={totalTime}
            onChangeText={(t) => setTotalTime(t.replace(/[^0-9]/g, ''))}
            keyboardType="number-pad"
            placeholder="0"
            placeholderTextColor="#64b5f6"
            maxLength={4}
          />
          <Text style={styles.timeUnit}>dk</Text>
        </View>
      </View>

      <View style={styles.listContainer}>
        {skills.map((skill, index) => {
          const animatedItemStyle = useAnimatedStyle(() => ({
            transform: [
              { translateY: positions[index].value },
              { scale: isDragging.value === index ? scale.value : 1 },
            ],
            zIndex: isDragging.value === index ? 999 : 0,
            shadowOpacity: isDragging.value === index ? 0.5 : 0,
            shadowRadius: isDragging.value === index ? 20 : 12,
            elevation: isDragging.value === index ? 12 : 8,
            opacity: isDragging.value === index ? 1 : 0.95,
            backgroundColor: isDragging.value === index ? '#34495e' : '#2c3e50',
          }));

          return (
            <PanGestureHandler key={skill} onGestureEvent={onGestureEvent(index)} onEnded={onGestureEnd(index)}>
              <Animated.View style={[styles.skillItem, animatedItemStyle]}>
                <View style={styles.skillContent}>
                  <Text style={styles.indexText}>{index + 1}</Text>
                  <Text style={styles.skillText}>{skill}</Text>

                  <View style={styles.timeContainer}>
                    <TextInput
                      style={styles.timeInput}
                      value={String(skillTimes[skill] || '')}
                      onChangeText={(text) => setSkillTimes((prev) => ({ ...prev, [skill]: text.replace(/[^0-9]/g, '') }))}
                      keyboardType="number-pad"
                      placeholder="0"
                      placeholderTextColor="#64b5f6"
                      maxLength={4}
                    />
                    <Text style={styles.timeUnit}>dk</Text>
                  </View>

                  <TouchableOpacity style={styles.removeButton} onPress={() => handleRemoveSkill(skill)}>
                    <Text style={styles.removeButtonText}>×</Text>
                  </TouchableOpacity>
                </View>
              </Animated.View>
            </PanGestureHandler>
          );
        })}
      </View>

      <TouchableOpacity style={styles.saveButton} onPress={handleSave}>
        <Text style={styles.saveButtonText}>Kaydet</Text>
      </TouchableOpacity>
    </GestureHandlerRootView>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, padding: 16 },
  topHeader: { flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', paddingHorizontal: 8, paddingBottom: 12, borderBottomColor: '#34495e', borderBottomWidth: 1 },
  headerText: { fontSize: 18, fontWeight: 'bold', color: '#fff' },
  totalTimeContainer: { flexDirection: 'row', alignItems: 'center' },
  totalTimeLabel: { color: '#fff', marginRight: 8 },
  totalTimeInput: { backgroundColor: '#34495e', borderRadius: 8, padding: 8, width: 70, color: '#fff', textAlign: 'center', borderWidth: 1, borderColor: '#64b5f6' },
  timeUnit: { color: '#64b5f6', marginLeft: 6 },
  listContainer: { flex: 1, marginTop: 12 },
  skillItem: { position: 'absolute', left: 0, right: 0, height: ITEM_HEIGHT, backgroundColor: '#2c3e50', borderRadius: 12, padding: 12, marginVertical: 5, borderWidth: 1, borderColor: '#34495e' },
  skillContent: { flex: 1, flexDirection: 'row', alignItems: 'center' },
  indexText: { width: 28, textAlign: 'center', color: '#64b5f6', fontWeight: 'bold' },
  skillText: { flex: 1, color: '#fff', marginLeft: 12 },
  timeContainer: { flexDirection: 'row', alignItems: 'center', marginLeft: 8 },
  timeInput: { backgroundColor: '#34495e', borderRadius: 8, padding: 8, width: 50, color: '#fff', textAlign: 'center', borderWidth: 1, borderColor: '#64b5f6' },
  removeButton: { width: 30, height: 30, borderRadius: 15, backgroundColor: '#e74c3c', justifyContent: 'center', alignItems: 'center', marginLeft: 12 },
  removeButtonText: { color: '#fff', fontSize: 18, fontWeight: 'bold' },
  saveButton: { position: 'absolute', bottom: 20, right: 20, backgroundColor: '#64b5f6', paddingVertical: 12, paddingHorizontal: 20, borderRadius: 8 },
  saveButtonText: { color: '#fff', fontWeight: 'bold' },
});

export default DraggableSkillList;
